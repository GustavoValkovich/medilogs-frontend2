{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PacienteService = /*#__PURE__*/(() => {\n  class PacienteService {\n    constructor(http) {\n      this.http = http;\n      this.base = environment.apiBase;\n    }\n    authHeaders() {\n      const token = localStorage.getItem('medilogs_token');\n      if (token) {\n        return {\n          headers: new HttpHeaders({\n            Authorization: `Bearer ${token}`\n          })\n        };\n      }\n      return {};\n    }\n    getPacientes() {\n      return this.http.get(`${this.base}/patients`).pipe(map(list => list.map(p => this.normalizePacienteFromApi(p))));\n    }\n    getPaciente(id) {\n      return this.http.get(`${this.base}/patients/${id}`).pipe(map(p => this.normalizePacienteFromApi(p)));\n    }\n    createPaciente(data) {\n      return this.http.post(`${this.base}/patients`, data);\n    }\n    createHistoria(pacienteId, historia) {\n      // las consultas en el backend requieren autenticación; si existe token local lo enviamos\n      return this.http.post(`${this.base}/consultations`, {\n        pacienteId,\n        ...historia\n      }, this.authHeaders());\n    }\n    normalizePacienteFromApi(api) {\n      // Map common API fields to the frontend Paciente model with sensible fallbacks.\n      const nombreCompleto = api.full_name || null;\n      let nombre = '';\n      let apellido = '';\n      if (nombreCompleto) {\n        const parts = nombreCompleto.trim().split(/\\s+/);\n        nombre = parts.shift() || '';\n        apellido = parts.join(' ') || '';\n      } else if (api.email) {\n        // fallback to email local-part as nombre\n        nombre = String(api.email).split('@')[0];\n      }\n      // Calculate age from birth_date if provided (ISO string), otherwise 0\n      let edad = 0;\n      if (api.birth_date) {\n        const bd = new Date(api.birth_date);\n        if (!isNaN(bd.getTime())) {\n          const diff = Date.now() - bd.getTime();\n          edad = Math.floor(diff / (1000 * 60 * 60 * 24 * 365.25));\n        }\n      }\n      return {\n        id: api.id,\n        nombre,\n        apellido,\n        edad,\n        dni: api.document || api.dni || undefined,\n        obraSocial: api.insurance || api.obraSocial || undefined,\n        telefono: api.phone || api.telefono || undefined,\n        email: api.email || undefined,\n        domicilio: api.city || api.domicilio || undefined\n      };\n    }\n    static {\n      this.ɵfac = function PacienteService_Factory(t) {\n        return new (t || PacienteService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: PacienteService,\n        factory: PacienteService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return PacienteService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}